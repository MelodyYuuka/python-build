name: Build Python Action

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
        description: "Python version to build"
      architecture:
        required: false
        type: string
        default: "x86-64"
        description: "Architecture to build for"
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      architecture:
        required: false
        type: string
        default: "x86-64"

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      sub_version: ${{ needs.sub_version.outputs.sub_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: get sub_version
        id: sub_version
        run: echo "sub_version=$(python3 get_latest.py ${{ inputs.version }})" >> "$GITHUB_ENV"

      - name: Install compile dependencies
        run: |
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" | sudo tee -a /etc/apt/sources.list > /dev/null
          echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" | sudo tee -a /etc/apt/sources.list > /dev/null
          wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libbz2-dev libsqlite3-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev wget checkinstall
          sudo apt-get install -y libllvm-18-ocaml-dev libllvm18 llvm-18 llvm-18-dev llvm-18-doc llvm-18-examples llvm-18-runtime
          sudo apt-get install -y clang-18 clang-tools-18 clang-18-doc libclang-common-18-dev libclang-18-dev libclang1-18 clang-format-18 python3-clang-18 clangd-18 clang-tidy-18
          sudo apt-get install -y libclang-rt-18-dev
          sudo apt-get install -y libbolt-18-dev bolt-18
          sudo ln -s /usr/bin/llvm-bolt-18 /usr/bin/llvm-bolt
          sudo ln -s /usr/bin/merge-fdata-18 /usr/bin/merge-fdata

      - name: Download and compile Python
        run: |
          wget https://www.python.org/ftp/python/${{ inputs.version }}/Python-$sub_version.tgz
          tar xzf Python-$sub_version.tgz
          cd Python-$sub_version
          ./configure $(python3 ../get_opts.py ${{ inputs.version }})
          make -j4 CFLAGS="${{ env.PYTHON_CFLAGS }}"
        env:
          PYTHON_CFLAGS: -march=${{ inputs.architecture }} -O3

      - name: Install and package Python
        run: |
          cd Python-$sub_version
          if [[ $sub_version == *.*.* ]]; then
            echo "major_minor_version=${sub_version%.*}" >> "$GITHUB_ENV"
            major_minor_version=${sub_version%.*}
          else
            echo "major_minor_version=$sub_version" >> "$GITHUB_ENV"
            major_minor_version=$sub_version
          fi
          sudo checkinstall -D --pkgname=python$major_minor_version --pkgversion=$sub_version --pkgrelease=1 --arch=amd64 --default make altinstall

      - name: Upload Python package
        uses: actions/upload-artifact@v4
        with:
          name: python${{ env.sub_version }}-${{ inputs.architecture }}
          path: Python-${{ env.sub_version }}/python${{ env.major_minor_version }}_${{ env.sub_version }}-1_amd64.deb
