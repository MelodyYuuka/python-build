name: Build Python Action

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
        description: "Python version to build"
      architecture:
        required: false
        type: string
        default: "x86-64"
        description: "Architecture to build for"
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      architecture:
        required: false
        type: string
        default: "x86-64"

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      sub_version: ${{ needs.sub_version.outputs.sub_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: get sub_version
        id: sub_version
        run: echo "sub_version=$(python3 get_latest.py ${{ inputs.version }})" >> "$GITHUB_ENV"

      - name: Install compile dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libbz2-dev libsqlite3-dev libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev wget checkinstall

      - name: Download and compile llvm-bolt
        run: |
          git clone https://github.com/llvm/llvm-project.git
          mkdir build
          cd build
          cmake -G "Unix Makefiles" ../llvm-project/llvm -DLLVM_TARGETS_TO_BUILD="X86" -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_PROJECTS="bolt"
          make bolt
          echo "PATH=$PATH:$(pwd)/bin" >> $GITHUB_ENV

      - name: Download and compile Python
        run: |
          wget https://www.python.org/ftp/python/${{ inputs.version }}/Python-$sub_version.tgz
          tar xzf Python-$sub_version.tgz
          cd Python-$sub_version
          ./configure $(python3 ../get_opts.py ${{ inputs.version }})
          make -j4 CFLAGS="${{ env.PYTHON_CFLAGS }}"
        env:
          PYTHON_CFLAGS: -march=${{ inputs.architecture }} -O3

      - name: Install and package Python
        run: |
          cd Python-$sub_version
          if [[ $sub_version == *.*.* ]]; then
            echo "major_minor_version=${sub_version%.*}" >> "$GITHUB_ENV"
            major_minor_version=${sub_version%.*}
          else
            echo "major_minor_version=$sub_version" >> "$GITHUB_ENV"
            major_minor_version=$sub_version
          fi
          sudo checkinstall -D --pkgname=python$major_minor_version --pkgversion=$sub_version --pkgrelease=1 --arch=amd64 --default make altinstall

      - name: Upload Python package
        uses: actions/upload-artifact@v4
        with:
          name: python${{ env.sub_version }}-${{ inputs.architecture }}
          path: Python-${{ env.sub_version }}/python${{ env.major_minor_version }}_${{ env.sub_version }}-1_amd64.deb
